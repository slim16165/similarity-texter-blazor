@using SimilarityTextComparison.Core.Models.Comparison
@using SimilarityTextComparison.Core.Models.TextProcessing
@if (Results != null && Results.Any())
{
    <h4>Risultati del Confronto</h4>
    @foreach (var result in Results)
    {
        <div class="card mb-3">
            <div class="card-body">
                <p class="card-text">
                    <strong>Testo @(result.TextIndex + 1):</strong>
                    @GetMatchText(result, Tokens)
                </p>
            </div>
        </div>
    }
}
else
{
    <p>Nessun risultato da mostrare.</p>
}

@code {
    [Parameter]
    public List<MatchSegment> Results { get; set; }

    [Parameter]
    public List<Token> Tokens { get; set; }

    private string GetMatchText(MatchSegment match, List<Token> tokens)
    {
        int startPos = match.GetTxtBeginPos(tokens);
        int endPos = match.GetTxtEndPos(tokens);

        // Assumiamo che il testo originale sia accessibile tramite una proprietà o metodo
        string originalText = GetOriginalText(match.TextIndex);

        return originalText.Substring(startPos, endPos - startPos + 1);
    }

    private string GetOriginalText(int textIndex)
    {
        // Implementa questo metodo per restituire il testo originale basato sull'indice
        // Potrebbe essere necessario passare i testi originali come parametri aggiuntivi
        // o memorizzarli in una proprietà della classe
        return textIndex == 0 ? MyInputText1 : MyInputText2;
    }

    [Parameter]
    public string MyInputText1 { get; set; }

    [Parameter]
    public string MyInputText2 { get; set; }
}