@using SimilarityTextComparison.Infrastructure.Services
@inject IStorageService StorageService

<div class="mb-3">
	<label class="form-label">@Title:</label>
	<InputFile OnChange="HandleFileSelected" accept=".docx, .odt, .txt" />
</div>

@code {
	[Parameter]
	public string Title { get; set; }

	[Parameter]
	public string FileContent { get; set; }

	[Parameter]
	public EventCallback<string> FileContentChanged { get; set; }

	private bool isLoading = false;
	private string alertMessage;
	private string alertType;

	private async Task HandleFileSelected(InputFileChangeEventArgs e)
	{
		isLoading = true;
		alertMessage = string.Empty;

		try
		{
			var file = e.File;
			await using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10 MB limit
			using var reader = new StreamReader(stream);
			var content = await reader.ReadToEndAsync();

			await StorageService.SetItemAsync($"file_{Title}", content);
			await FileContentChanged.InvokeAsync(content);
		}
		catch (Exception ex)
		{
			alertMessage = $"Errore durante il caricamento del file: {ex.Message}";
			alertType = "danger";
		}
		finally
		{
			isLoading = false;
			StateHasChanged();
		}
	}
}