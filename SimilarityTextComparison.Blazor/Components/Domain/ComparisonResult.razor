@using SimilarityTextComparison.Domain.Models.Matching
@using SimilarityTextComparison.Domain.Models.TextPreProcessing
@using System.Text.Encodings.Web
@using SimilarityTextComparison.Application.Pipeline

<div class="comparison-output-container">
    @if (!string.IsNullOrEmpty(InputText) && Results != null && Results.Any())
    {
        <div>@(RenderHighlighted(InputText, Results, TextIndex))</div>
    }
    else
    {
        <p>Nessun risultato da mostrare (o testo mancante).</p>
    }
</div>

@code {
    [Parameter] public string InputText { get; set; }
    [Parameter] public List<List<MatchSegment>> Results { get; set; }
    [Parameter] public int TextIndex { get; set; }

    private MarkupString RenderHighlighted(string fullText, List<List<MatchSegment>> allMatches, int txtIdx)
    {
        if (string.IsNullOrWhiteSpace(fullText))
            return (MarkupString)$"<pre>{HtmlEncoder.Default.Encode(fullText)}</pre>";

        var tokens = MatchingContext.UnifiedTokensStatic;
        var segments = allMatches
            .SelectMany(m => m)
            .Where(s => s.TextIndex == txtIdx)
            .OrderBy(s => s.GetTxtBeginPos(tokens))
            .ToList();

        if (!segments.Any())
            return (MarkupString)$"<pre>{HtmlEncoder.Default.Encode(fullText)}</pre>";

        var sb = new System.Text.StringBuilder();
        int currentPos = 0;
        foreach (var seg in segments)
        {
            int segStart = seg.GetTxtBeginPos(tokens);
            int segEnd = seg.GetTxtEndPos(tokens);

            if (segStart < 0 || segEnd > fullText.Length || segStart >= segEnd)
                continue;

            // testo "prima" del match
            if (currentPos < segStart)
            {
                sb.Append(HtmlEncoder.Default.Encode(fullText.Substring(currentPos, segStart - currentPos)));
            }

            // il match evidenziato come <a>
            var chunk = fullText.Substring(segStart, segEnd - segStart);
            var link = seg.CreateLinkNode(chunk, seg);
            sb.Append(link);

            currentPos = segEnd;
        }
        // eventuale parte finale
        if (currentPos < fullText.Length)
        {
            sb.Append(HtmlEncoder.Default.Encode(fullText.Substring(currentPos)));
        }

        return (MarkupString)sb.ToString();
    }
}
