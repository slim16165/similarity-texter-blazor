@using SimilarityTextComparison.Blazor.Models
@using SimilarityTextComparison.Domain.Models.TextPreProcessing
@using SimilarityTextComparison.Domain.Models.Matching
@using Microsoft.JSInterop

<div class="comparison-dashboard">
    <!-- Titolo -->
    <h4>Risultati del Confronto</h4>

    <!-- 1) Sezione statistiche -->
    <Statistics Texts="@Texts" UniqueMatches="@UniqueMatches" />

    <!-- 2) Testi con highlight -->
    <h5>Testo 1 (con evidenziazioni)</h5>
    <ComparisonResult Results="@Results"
                      MyInputText1="@Texts[0].Text"
                      MyInputText2="@Texts[1].Text"
                      Tokens="@Tokens"
                      RenderTextIndex="0" />

    <h5>Testo 2 (con evidenziazioni)</h5>
    <ComparisonResult Results="@Results"
                      MyInputText1="@Texts[0].Text"
                      MyInputText2="@Texts[1].Text"
                      Tokens="@Tokens"
                      RenderTextIndex="1" />

    <!-- 3) Pulsante "Stampa" -->
    <button class="btn btn-secondary mt-3" @onclick="ShowPrintDialog">Stampa</button>

    <!-- 4) Dialog di stampa -->
    <PrintDialog IsVisible="@showPrintDialog"
                 OnClose="@ClosePrintDialog"
                 OnPrint="@HandlePrint"
                 Texts="@Texts" />

    <!-- 5) PrintSummary (invisibile) -->
    @if (showPrintSummary)
    {
        <div style="display:none;">
            <PrintSummary Texts="@Texts"
                          UniqueMatches="@UniqueMatches"
                          Comment1="@Comment1"
                          Comment2="@Comment2" />
        </div>
    }
</div>

@code {
    [Parameter]
    public List<MyInputText> Texts { get; set; }

    [Parameter]
    public List<List<MatchSegment>> Results { get; set; }

    [Parameter]
    public List<Token> Tokens { get; set; }

    [Parameter]
    public int UniqueMatches { get; set; }

    private bool showPrintDialog;
    private bool showPrintSummary;
    private string Comment1 = string.Empty;
    private string Comment2 = string.Empty;

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    private void ShowPrintDialog()
    {
        showPrintDialog = true;
    }

    private async Task ClosePrintDialog()
    {
        showPrintDialog = false;
    }

    private async void HandlePrint(object o)
    {
		var comments = (Tuple<string, string>)o;

        Comment1 = comments.Item1;
        Comment2 = comments.Item2;
        showPrintDialog = false;
        showPrintSummary = true;

        // Aspetta che il componente PrintSummary sia montato
        await InvokeAsync(StateHasChanged);

        // Avvia la stampa
        await JSRuntime.InvokeVoidAsync("window.print");
    }
}