@using SimilarityTextComparison.Infrastructure.Services
@using SimilarityTextComparison.Blazor.Components.Shared
@inject IStorageService StorageService

<div class="p-3">
    <div class="form-check mb-2">
        <InputCheckbox id="ignoreFootnotes" class="form-check-input" @bind-Value="IgnoreFootnotes" />
        <label class="form-check-label" for="ignoreFootnotes">Ignora Note a Piè di Pagina</label>
    </div>
    <div class="form-check mb-2">
        <InputCheckbox id="ignoreLetterCase" class="form-check-input" @bind-Value="IgnoreLetterCase" />
        <label class="form-check-label" for="ignoreLetterCase">Ignora Maiuscole/Minuscole</label>
    </div>
    <div class="form-check mb-2">
        <InputCheckbox id="ignoreNumbers" class="form-check-input" @bind-Value="IgnoreNumbers" />
        <label class="form-check-label" for="ignoreNumbers">Ignora Numeri</label>
    </div>
    <div class="form-check mb-2">
        <InputCheckbox id="ignorePunctuation" class="form-check-input" @bind-Value="IgnorePunctuation" />
        <label class="form-check-label" for="ignorePunctuation">Ignora Punteggiatura</label>
    </div>
    <div class="form-check mb-2">
        <InputCheckbox id="replaceUmlaut" class="form-check-input" @bind-Value="ReplaceUmlaut" />
        <label class="form-check-label" for="replaceUmlaut">Sostituisci Umlaut</label>
    </div>

    <button class="btn btn-primary mt-3 w-100" @onclick="SaveSettings">Salva Impostazioni</button>

    <Loader IsLoading="isLoading" />

    @if (!string.IsNullOrEmpty(alertMessage))
    {
        <AlertMessage Message="@alertMessage" AlertType="@alertType" />
    }
</div>

@code {
    private bool IgnoreFootnotes { get; set; }
    private bool IgnoreLetterCase { get; set; }
    private bool IgnoreNumbers { get; set; }
    private bool IgnorePunctuation { get; set; }
    private bool ReplaceUmlaut { get; set; }

    private bool isLoading = false;
    private string alertMessage;
    private string alertType;

    protected override async Task OnInitializedAsync()
    {
        IgnoreFootnotes = await StorageService.GetItemAsync<bool>("ignoreFootnotes");
        IgnoreLetterCase = await StorageService.GetItemAsync<bool>("ignoreLetterCase");
        IgnoreNumbers = await StorageService.GetItemAsync<bool>("ignoreNumbers");
        IgnorePunctuation = await StorageService.GetItemAsync<bool>("ignorePunctuation");
        ReplaceUmlaut = await StorageService.GetItemAsync<bool>("replaceUmlaut");
    }

    private async Task SaveSettings()
    {
        isLoading = true;
        alertMessage = string.Empty;

        try
        {
            await StorageService.SetItemAsync("ignoreFootnotes", IgnoreFootnotes);
            await StorageService.SetItemAsync("ignoreLetterCase", IgnoreLetterCase);
            await StorageService.SetItemAsync("ignoreNumbers", IgnoreNumbers);
            await StorageService.SetItemAsync("ignorePunctuation", IgnorePunctuation);
            await StorageService.SetItemAsync("replaceUmlaut", ReplaceUmlaut);

            alertMessage = "Impostazioni salvate con successo!";
            alertType = "info";
        }
        catch (Exception ex)
        {
            alertMessage = $"Errore nel salvataggio delle impostazioni: {ex.Message}";
            alertType = "danger";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
