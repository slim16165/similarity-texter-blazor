@using SimilarityTextComparison.Infrastructure.Services
@using SimilarityTextComparison.Blazor.Components.Shared
@inject IStorageService StorageService

<div class="p-3">
    @foreach (var setting in CurrentSettings)
    {
        <div class="form-check mb-2">
            <InputCheckbox id="@setting.Key" class="form-check-input" @bind-Value="@setting.Value" />
            <label class="form-check-label" for="@setting.Key">@setting.Label</label>
        </div>
    }

    <button class="btn btn-primary mt-3 w-100" @onclick="SaveSettings">Salva Impostazioni</button>

    <Loader IsLoading="isLoading" />

    @if (!string.IsNullOrEmpty(alertMessage))
    {
        <AlertMessage Message="@alertMessage" AlertType="@alertType" />
    }
</div>

@code {
    private List<SettingOption> CurrentSettings { get; set; } = new List<SettingOption>();

    private bool isLoading = false;
    private string alertMessage;
    private string alertType;

    protected override async Task OnInitializedAsync()
    {
        CurrentSettings = await SettingOption.CreateSettingsAsync(StorageService,
            new (string Key, string Label)[]
            {
                ("ignoreFootnotes", "Ignora Note a Piè di Pagina"),
                ("ignoreLetterCase", "Ignora Maiuscole/Minuscole"),
                ("ignoreNumbers", "Ignora Numeri"),
                ("ignorePunctuation", "Ignora Punteggiatura"),
                ("replaceUmlaut", "Sostituisci Umlaut"),
                ("isHtmlInput", "Tratta l'Input come HTML")
            });
    }

    private async Task SaveSettings()
    {
        isLoading = true;
        alertMessage = string.Empty;

        try
        {
            foreach (var setting in CurrentSettings)
            {
                await StorageService.SetItemAsync(setting.Key, setting.Value);
            }

            alertMessage = "Impostazioni salvate con successo!";
            alertType = "info";
        }
        catch (Exception ex)
        {
            alertMessage = $"Errore nel salvataggio delle impostazioni: {ex.Message}";
            alertType = "danger";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private class SettingOption
    {
        public string Key { get; set; }
        public string Label { get; set; }
        public bool Value { get; set; }

        public SettingOption(string key, string label, bool value)
        {
            Key = key;
            Label = label;
            Value = value;
        }

        public static async Task<List<SettingOption>> CreateSettingsAsync(IStorageService storageService, (string Key, string Label)[] settings)
        {
            var result = new List<SettingOption>();

            foreach (var (key, label) in settings)
            {
                var value = await storageService.GetItemAsync<bool>(key);
                result.Add(new SettingOption(key, label, value));
            }

            return result;
        }
    }
}