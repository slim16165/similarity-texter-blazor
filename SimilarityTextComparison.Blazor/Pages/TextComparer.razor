@page "/"
@using SimilarityTextComparison.Application.Interfaces
@using SimilarityTextComparison.Application.Pipeline
@using SimilarityTextComparison.Domain.Models.Matching
@using SimilarityTextComparison.Domain.Models.TextPreProcessing
@using SimilarityTextComparison.Infrastructure.Services
@using SimilarityTextComparison.Blazor.Components.Shared
@using SimilarityTextComparison.Blazor.Components.Domain

@inject IStorageService StorageService
@inject ITextComparer MyTextComparer

<h3 class="mt-4">Confronto Testi (Inline Highlight)</h3>

<!-- Loader -->
<Loader IsLoading="isLoading" />

<!-- Messaggio di allerta -->
@if (!string.IsNullOrEmpty(alertMessage))
{
    <AlertMessage Message="@alertMessage" AlertType="@alertType" />
}

<!-- Pannello di Input -->
<div class="row mt-4">
    <div class="col-md-6">
        <FileUploader Title="File 1" @bind-FileContent="FileContent1" />
    </div>
    <div class="col-md-6">
        <FileUploader Title="File 2" @bind-FileContent="FileContent2" />
    </div>
</div>

<!--
    Utilizzo del componente ContentEditable per i testi senza highlight
-->
<div class="row mt-4">
    <div class="col-md-6">
        <label>Testo 1:</label>
        <ContentEditable CssClass="border p-2"
                         Style="height: 150px; overflow-y: auto;"
                         Content="@plainText1"
                         ContentChanged="OnPlainText1Changed" />
    </div>
    <div class="col-md-6">
        <label>Testo 2:</label>
        <ContentEditable CssClass="border p-2"
                         Style="height: 150px; overflow-y: auto;"
                         Content="@plainText2"
                         ContentChanged="OnPlainText2Changed" />
    </div>
</div>

<div class="text-center mt-3">
    <button class="btn btn-primary" @onclick="CompareTexts" disabled="@isLoading">Confronta (Inline)</button>
</div>

<!--
    Mostra i risultati con highlight
-->
@if (matchesFound)
{
    <div class="row mt-4">
        <div class="col-md-6">
            <label>Testo 1 (highlight):</label>
            <div class="border p-2" style="height: 150px; overflow-y: auto;">
                @((MarkupString)inlineText1)
            </div>
        </div>
        <div class="col-md-6">
            <label>Testo 2 (highlight):</label>
            <div class="border p-2" style="height: 150px; overflow-y: auto;">
                @((MarkupString)inlineText2)
            </div>
        </div>
    </div>
}

@code {
    private string FileContent1;
    private string FileContent2;
    private bool isLoading;
    private string alertMessage;
    private string alertType;

    // Queste due variabili conterranno il markup HTML da visualizzare (highlight)
    private string inlineText1 = string.Empty;
    private string inlineText2 = string.Empty;

    // Manteniamo una copia “pulita” del testo per evitare che Blazor ricicli markup
    private string plainText1 = string.Empty;
    private string plainText2 = string.Empty;

    private bool matchesFound = false;

    // Gestione del cambio testo “a mano” (non da file)
    private void OnPlainText1Changed(string newValue)
    {
        plainText1 = newValue;
        Console.WriteLine($"plainText1 aggiornato: {plainText1}");
    }

    private void OnPlainText2Changed(string newValue)
    {
        plainText2 = newValue;
        Console.WriteLine($"plainText2 aggiornato: {plainText2}");
    }

    private async Task CompareTexts()
    {
        if ((string.IsNullOrWhiteSpace(plainText1) && string.IsNullOrWhiteSpace(FileContent1)) ||
            (string.IsNullOrWhiteSpace(plainText2) && string.IsNullOrWhiteSpace(FileContent2)))
        {
            alertMessage = "Inserisci entrambi i testi (file o manuale) prima di confrontare.";
            alertType = "warning";
            Console.WriteLine("Entrambi i testi sono vuoti o nulli.");
            return;
        }

        isLoading = true;
        alertMessage = string.Empty;
        matchesFound = false;

        try
        {
            // Decidi quale testo finale prendere
            string text1 = !string.IsNullOrWhiteSpace(FileContent1) ? FileContent1 : plainText1;
            string text2 = !string.IsNullOrWhiteSpace(FileContent2) ? FileContent2 : plainText2;

            Console.WriteLine($"Testo 1: {text1}");
            Console.WriteLine($"Testo 2: {text2}");

            // Esegui la pipeline di matching
            var matches = await MyTextComparer.CompareAsync(text1, text2);

            // Se abbiamo match, generiamo l'HTML highlight per ognuno
            // e sostituiamo inline le stringhe
            if (matches != null && matches.Any())
            {
                Console.WriteLine($"Trovati {matches.Count} match.");

                // Richiamiamo una funzione C# che crea l'HTML evidenziato
                // Stessa logica di "ComparisonResult", ma integrata direttamente qui
                inlineText1 = BuildHighlightedText(text1, matches, 0);
                inlineText2 = BuildHighlightedText(text2, matches, 1);
                matchesFound = true;
            }
            else
            {
                inlineText1 = $"<pre>{System.Net.WebUtility.HtmlEncode(text1)}</pre>";
                inlineText2 = $"<pre>{System.Net.WebUtility.HtmlEncode(text2)}</pre>";
                alertMessage = "Nessuna similarità trovata.";
                alertType = "info";
                matchesFound = false;
                Console.WriteLine("Nessun match trovato.");
            }
        }
        catch (Exception ex)
        {
            alertMessage = ex.Message;
            alertType = "danger";
            matchesFound = false;
            Console.WriteLine($"Errore durante il confronto: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    // Funzione per convertire i match in HTML evidenziato
    private string BuildHighlightedText(string fullText, List<List<MatchSegment>> allMatches, int textIndex)
    {
        if (string.IsNullOrEmpty(fullText)) return $"<pre>{fullText}</pre>";

        // Estrai tutti i segmenti di match relativi a textIndex
        var segments = allMatches
            .SelectMany(pair => pair)
            .Where(ms => ms.TextIndex == textIndex)
            .OrderBy(ms => ms.GetTxtBeginPos(MatchingContext.UnifiedTokensStatic))
            .ToList();

        if (!segments.Any())
            return $"<pre>{System.Net.WebUtility.HtmlEncode(fullText)}</pre>";

        var sb = new System.Text.StringBuilder();
        int currentPos = 0;

        // tokens static in MatchingContext
        var tokens = MatchingContext.UnifiedTokensStatic;

        foreach (var seg in segments)
        {
            int segStart = seg.GetTxtBeginPos(tokens);
            int segEnd = seg.GetTxtEndPos(tokens);

            if (segStart < 0 || segEnd > fullText.Length || segStart >= segEnd)
                continue;

            if (currentPos < segStart)
            {
                var normalChunk = fullText.Substring(currentPos, segStart - currentPos);
                sb.Append(System.Net.WebUtility.HtmlEncode(normalChunk));
            }

            // Trova il segmento corrispondente nel testo opposto
            var correspondingSeg = allMatches
                .SelectMany(pair => pair)
                .FirstOrDefault(s => s.TextIndex != textIndex &&
                                     s.MatchedText.Equals(seg.MatchedText, StringComparison.OrdinalIgnoreCase));

            // Se non troviamo un segmento corrispondente, usiamo il seg stesso
            if (correspondingSeg == null)
                correspondingSeg = seg;

            // Creazione del link per l'highlight
            var matchChunk = fullText.Substring(segStart, segEnd - segStart);
            var linkHtml = seg.CreateLinkNode(matchChunk, correspondingSeg);

            sb.Append(linkHtml);

            currentPos = segEnd;
        }

        if (currentPos < fullText.Length)
        {
            var tail = fullText.Substring(currentPos);
            sb.Append(System.Net.WebUtility.HtmlEncode(tail));
        }

        return sb.ToString();
    }
}
